#!/bin/bash
clear
#Date Variable
Today=`date +%d_%m_%Y_%H_%M`
echo     "*****************************"
echo -e  "*\e[1;32m Today is $Today\e[0m *"
echo     "*****************************"
echo

# HostName Variable
HTName=`hostname -s`
ceph_status=""
worker_count=`kubectl get no -A | grep -e pool -e plab | wc -l`

echo     "*****************************"
echo -e  "* \e[1;33mThere are ${worker_count} Worker Nodes\e[0m *"
echo     "*****************************"


LOGFILE="HealthCheck-Report-${HTName}_${Today}"
echo > $LOGFILE
echo
echo "******************************************************************"
echo -e "* This Healthcheck is running from Host \e[1;31m'$HTName'\e[0m *"
echo "******************************************************************"
echo -e "\n\n\n"

        active_alarm_list=`curl http://"$(kubectl get svc -n monitoring | grep eric-pm-alertmanager | awk '{ print $3 }')":9093/api/v1/alerts | python -mjson.tool|grep description | awk -F ":" '{print $2}' | wc -l`
        echo ${active_alarm_list} Active Alarms

        pod_status=`kubectl get pods -A | grep -v -e Running -e Succeeded -e Completed |wc -l`
        echo ${pod_status} Pod in Error

        node_status=`kubectl get nodes -A -o wide | grep -v Ready | sed '1d' | wc -l`
        echo ${node_status} Nodes not in Ready State

        service_status=`kubectl get service -A | grep -i error | wc -l`
        echo ${service_status} Services in Error State

        pvc_status=`kubectl get pvc -A | grep -v Bound | sed '1d' | wc -l`
        echo ${pvc_status} PVC in Not Bound State

        bmh_status=`kubectl get bmh -A | grep -v provisioned | sed '1d' | wc -l`
        echo ${bmh_status} BMH in Not Provisioned State

        machine_status=`kubectl get machine -A | grep -v Running | sed '1d' | wc -l`
        echo ${machine_status} Machines in Not Running State

        calico_status=`sudo /usr/local/bin/calicoctl node status | grep -i down | wc -l`
        echo ${calico_status} Calico Peers in Down State

        ecfe_speaker_status=`kubectl get pods -n kube-system | grep -v Running | sed '1d' | wc -l`
        echo ${ecfe_speaker_status} ECFE Speakers in not Running State

        ceph_status=`kubectl -n rook-ceph exec  $(kubectl -n rook-ceph get pod -l "app=rook-ceph-tools" -o jsonpath='{.items[0].metadata.name}') -- ceph status | grep -i health |sed '$d'| awk -F ":" '{print $2}'`
        echo CEPH Cluster is in ${ceph_status} State

        bfd_status_control=`for i in echo $(kubectl get po -A -o wide | grep speaker | grep control | awk '{ print $2 }') ; do kubectl exec $i -n kube-system -- birdcl show bfd sessions ; done | grep -i up  | wc -l`
        echo ${bfd_status_control} BFD are in UP State for Control Nodes

        bfd_status_workers=`for i in echo $(kubectl get po -A -o wide | grep speaker | grep -e pool -e plab | awk '{ print $2 }') ; do kubectl exec $i -n kube-system -- birdcl show bfd sessions ; done | grep -i up | wc -l`
        echo ${bfd_status_workers} BFD are in UP State for Worker Nodes

        worker_bfd_count_required=$(( 4 * ${worker_count}))
        echo ${worker_bfd_count_required} BFD Connections are Required for Workers

#       worker_bfd_count_required=5
#       echo ${worker_bfd_count_required}_BFD_are_in_UP_State_for_Control_Nodes

final_report(){
       if [[  $active_alarm_list > 0 ]]
       then
             echo " 1. Active Alarm Result  -  |  FAILED  |" | tee -a $LOGFILE
       else
             echo -e " 1. Active Alarm Result  -  |  \e[1;32m PASSED \e[0m  |" | tee -a $LOGFILE
       fi
       echo -e "\n"
        sleep 1

       if [[ $pod_status > 0 ]]
       then
             echo " 2. Pod Health Status  -  |  FAILED  |" | tee -a $LOGFILE
       else
             echo -e " 2. Pod Health Status  -  |  \e[1;32m PASSED \e[0m  |" | tee -a $LOGFILE
       fi
       echo -e "\n"
        sleep 1

       if [[ $node_status > 0 ]]
       then
             echo " 3. Node Status  -  |  FAILED  |" | tee -a $LOGFILE
       else
             echo -e " 3. Node Status  -  |  \e[1;32m PASSED \e[0m  |" | tee -a $LOGFILE
       fi
       echo -e "\n"
        sleep 1

       if [[ $service_status > 0 ]]
       then
             echo " 4. Service Status  -  |  FAILED  |" | tee -a $LOGFILE
       else
             echo -e " 4. Service Status  -  |  \e[1;32m PASSED \e[0m  |" | tee -a $LOGFILE
       fi
       echo -e "\n"
        sleep 1

       if [[ $pvc_status > 0 ]]
       then
             echo " 5. PVC Bound Status  -  |  FAILED  |" | tee -a $LOGFILE
       else
             echo -e " 5. PVC Bound Status  -  |  \e[1;32m PASSED \e[0m  |" | tee -a $LOGFILE
       fi
       echo -e "\n"
        sleep 1

       if [[ $bmh_status > 0 ]]
       then
             echo " 6. BMH Status  -  |  FAILED  |" | tee -a $LOGFILE
       else
             echo -e " 6. BMH Status  -  |  \e[1;32m PASSED \e[0m  |" | tee -a $LOGFILE
       fi
       echo -e "\n"
        sleep 1

       if [[ $machine_status > 0 ]]
       then
             echo " 7. Machine Status  -  |  FAILED  |" | tee -a $LOGFILE
       else
             echo -e " 7. Machine Status  -  |  \e[1;32m PASSED \e[0m  |" | tee -a $LOGFILE
       fi
       echo -e "\n"
        sleep 1

       if [[ $calico_status > 0 ]]
       then
             echo " 8. Calico BGP Full Mesh Peer Status  -  |  FAILED  |" | tee -a $LOGFILE
       else
             echo -e " 8. Calico BGP Full Mesh Peer Status  -  |  \e[1;32m PASSED \e[0m  |" | tee -a $LOGFILE
       fi
       echo -e "\n"
        sleep 1

       if [[ $ecfe_speaker_status > 0 ]]
       then
             echo " 9. ECFE Speaker Status  -  |  FAILED  |" | tee -a $LOGFILE
       else
             echo -e " 9. ECFE Speaker Status  -  |  \e[1;32m PASSED \e[0m  |" | tee -a $LOGFILE
       fi
       echo -e "\n"
        sleep 1

       if [[ "$ceph_status" = " HEALTH_OK" ]]
       then
             echo -e " 10. CEPH Cluster Status  -  |  \e[1;32m PASSED \e[0m  |" | tee -a $LOGFILE
       elif [[ "$ceph_status" = " HEALTH_WARN" ]]
       then
             echo -e " 10. CEPH Cluster Status  -  |  \e[1;33m WARNING \e[0m  |" | tee -a $LOGFILE
       else [[ "$ceph_status" = " HEALTH_FAILED" ]]
             echo " 10. CEPH Cluster Status  -  |  FAILED  |" | tee -a $LOGFILE
       fi
       echo -e "\n"
        sleep 1

       if [[ "$bfd_status_control" == "6" ]]
       then
             echo -e " 11. BFD Status on Control nodes  -  |  \e[1;32m PASSED \e[0m  |" | tee -a $LOGFILE
       else
             echo " 11. BFD Status on Control nodes  -  |  FAILED  |" | tee -a $LOGFILE
       fi
       echo -e "\n"
        sleep 1

       if [[ "$bfd_status_workers" == "$worker_bfd_count_required" ]]
       then
             echo -e " 12. BFD Status on Worker nodes  -  |  \e[1;32m PASSED \e[0m  |" | tee -a $LOGFILE
       else
             echo " 12. BFD Status on Worker nodes  -  |  FAILED  |" | tee -a $LOGFILE
       fi
       echo -e "\n"


}
k=0
while [ $k = 0 ]
do
        echo
        echo "###################################################"
        echo "# SELECT Option Number from below mentioned list. #"
        echo "###################################################"
        echo
        echo "1 Active Alarms in Cluster"
        echo "2 Pods Status"
        echo "3 Nodes Status"
        echo "4 Services"
        echo "5 PVC Status"
        echo "6 BMH Status"
        echo "7 Machine Status"
        echo "8 Calico iBGP Full Mesh Peer Status"
        echo "9 ECFE Speakers Status"
        echo "10 CEPH Status"
        echo "11 BFD Control Nodes Status"
        echo "12 BFD Worker Nodes Status"
        echo "13 BGP Status"
        echo "14 ECCD Cluster Status"
        echo
        echo "Press 'q' to EXIT"
        echo
        read input

        case "$input" in
                1)
                echo
                echo "*****************************************************"
                echo "*****************************************************"
                echo "** Below is the Active Alarms List for the cluster **"
                echo "*****************************************************"
                echo "*****************************************************"
                echo
                echo "$active_alarm_func" | tee -a $LOGFILE
                aal=`curl http://"$(kubectl get svc -n monitoring | grep eric-pm-alertmanager | awk '{ print $3 }')":9093/api/v1/alerts | python -mjson.tool|grep description | awk -F ":" '{print $2}'`
                echo
                echo "$aal"
                read -p "Press enter to continue"
                echo
                ;;
                2)
                echo
                echo "**********************************************************************"
                echo "**********************************************************************"
                echo "** Below are the Pods except Running, Succeeded and Completed State **"
                echo "**********************************************************************"
                echo "**********************************************************************"
                echo
                pods=`kubectl get pods -A -o wide | grep -v -e Running -e Succeeded -e Completed`
                echo
                echo "$pods"
                read -p "Press enter to continue"
                echo
                ;;
                3)
                echo
                echo "*******************************************************************"
                echo "*******************************************************************"
                echo "** Below is the status of the Nodes which are not in READY state **"
                echo "*******************************************************************"
                echo "*******************************************************************"
                echo
                nodes=`kubectl get nodes -A -o wide | grep -v -e Ready`
                echo
                echo "$nodes"
                read -p "Press enter to continue"
                echo
                ;;
                4)
                echo
                echo "***********************************************"
                echo "***********************************************"
                echo "** Below are the services running in Cluster **"
                echo "***********************************************"
                echo "***********************************************"
                echo
                sleep 3
                services=`kubectl get service -A`
                echo
                echo "$services"
                read -p "Press enter to continue"
                echo
                ;;
                5)
                echo
                echo "**********************************************************"
                echo "**********************************************************"
                echo "** Below is the PVC Status which are not in Bound State **"
                echo "**********************************************************"
                echo "**********************************************************"
                echo
                pvc=`kubectl get pvc -A | grep -v -e Bound`
                echo
                echo "$pvc"
                read -p "Press enter to continue"
                echo
                ;;
                6)
                echo
                echo "***************************************************"
                echo "***************************************************"
                echo "** Below is the BMH Status for the Cluster Nodes **"
                echo "***************************************************"
                echo "***************************************************"
                echo
                bmh=`kubectl get bmh -A`
                sleep 3
                echo "$bmh"
                read -p "Press enter to continue"
                echo
                ;;
                7)
                echo
                echo "********************************************************************************"
                echo "********************************************************************************"
                echo "** Below is the Machine Status for the Nodes which are not in Running State ****"
                echo "********************************************************************************"
                echo "********************************************************************************"
                echo
                machine=`kubectl get machine -A | grep -v -e Running`
                sleep 3
                echo "$machine"
                read -p "Press enter to continue"
                echo
                ;;
                8)
                echo
                echo "****************************************************"
                echo "****************************************************"
                echo "** Below is the Calico Full Mesh iBGP Peer Status **"
                echo "****************************************************"
                echo "****************************************************"
                echo
                calico_bgp=`sudo /usr/local/bin/calicoctl node status`
                sleep 3
                echo "$calico_bgp"
                read -p "Press enter to continue"
                echo
                ;;
                9)
                echo
                echo "***************************************"
                echo "***************************************"
                echo "** Below is the ECFE Speakers Status **"
                echo "***************************************"
                echo "***************************************"
                echo
                ecfe_speakers=`kubectl get pods -n kube-system | grep speaker`
                sleep 3
                echo "$ecfe_speakers"
                read -p "Press enter to continue"
                echo
                ;;
                10)
                echo
                echo "**************************************"
                echo "**************************************"
                echo "** Below is the CEPH Cluster Status **"
                echo "**************************************"
                echo "**************************************"
                echo
                ceph_status=`kubectl -n rook-ceph exec  $(kubectl -n rook-ceph get pod -l "app=rook-ceph-tools" -o jsonpath='{.items[0].metadata.name}') -- ceph status`
                sleep 1
                echo "$ceph_status"
                read -p "Press enter to continue"
                echo
                ;;

                11)
                echo
                echo "***********************************************"
                echo "***********************************************"
                echo "** Below is the BFD Status for Control Nodes **"
                echo "***********************************************"
                echo "***********************************************"
                echo
                bfd_status_control=`for i in echo $(kubectl get po -A -o wide | grep speaker | grep control | awk '{ print $2 }') ; do kubectl exec $i -n kube-system -- birdcl show bfd sessions ; done`
                sleep 1
                echo "$bfd_status_control"
                read -p "Press enter to continue"
                echo
                ;;

                12)
                echo
                echo "**********************************************"
                echo "**********************************************"
                echo "** Below is the BFD Status for Worker Nodes **"
                echo "**********************************************"
                echo "**********************************************"
                echo
                bfd_status=`for i in echo $(kubectl get po -A -o wide | grep speaker | grep -e pool -e plab | awk '{ print $2 }') ; do kubectl exec $i -n kube-system -- birdcl show bfd sessions ; done`
                sleep 1
                echo "$bfd_status"
                read -p "Press enter to continue"
                echo
                ;;

                13)
                echo
                echo "***********************************************"
                echo "***********************************************"
                echo "** Below is the BGP Status for Cluster Nodes **"
                echo "***********************************************"
                echo "***********************************************"
                echo
                bgp_status=`for i in echo $(kubectl get po -A -o wide | grep speaker) ; do kubectl exec $i -n kube-system -- birdcl show protocols all ; done`
                sleep 1
                echo "$bgp_status"
                read -p "Press enter to continue"
                echo
                ;;

                14)
                status=False
                errors=""
                clear
                echo
                echo "**************************************"
                echo "**************************************"
                echo "** Below is the ECCD Cluster Status **"
                echo "**************************************"
                echo "**************************************"
                echo
                echo "Running Health Checks for the cluster... "
                sleep 3
                echo -e "\n"
                #aal=`curl http://"$(kubectl get svc -n monitoring | grep eric-pm-alertmanager | awk '{ print $3 }')":9093/api/v1/alerts | python -mjson.tool|grep description | awk -F ":" '{print $2}'`
                final_report
                echo -e "\n"
                read -p "Press enter to continue"
                clear
                echo
                ;;
                q)
                k=1
                echo "Exiting....."
                echo
                sleep 1
                ;;
                *)
                clear
                echo "Please Select Appropriate Option !!!"
                echo
                sleep 3
        esac
done
